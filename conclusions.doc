\section{Evaluation}
\label{sec:evaluation}

We have not performed any direct user evaluations with SWISH. Given the
pace of development, different configurations and user communities it is
not feasible to perform such a study with limited resources. Below we
summarise the impact of the system, lessons learned regarding using
Prolog as server language and a browser for providing an IDE and discuss
the portability.

SWISH is (September 2017)
online\footnote{\url{https://swish.swi-prolog.org}} for three years. It
is extensively being used for Prolog education. Since its launch, at
least three independently developed educational sites have been lanched:
\cplint{} and LPS (described in this article) and the book
\textit{Simply Logical} \cite{flach1994simply}. The main server now has
35,420 programs stored with 68,806 revisions. Usage is strongly
correlated with academic holidays, ranging from 36,415 queries per week
(July~31 - August~6, 2017) to 125,946 (May~7-14, 2017). Google link
search (\verb$link:swish.swi-prolog.org$) reports 8,490 links. The
popularity of the Github repository, 198 stars and 48 forks compared to
the main SWI-Prolog repository with 223 stars and 53 forks is another
indication of the impact.

The development of SWISH and its usage as a public service has proved to
be an important demonstration of SWI-Prolog's ability for writing web
services and a good stress-testing experience. We have been forced to
extend resource management, e.g., by limiting the program space
associated with the temporary modules to avoid that extensive use of
assert/1 would cause the server to run out of memory. Timeout and
exception handling needed to be improved to avoid runaway queries.
Notably resource exceptions such as stack overflows are frequent and
need to be handled reliably. Both scalability and reliability of
multi-threaded execution needed to be improved. We now reached a level
of stability were restarts due to software upgrades (every one to two
weeks) have become more frequent than restarts due to crashes and the
requirement to restart due to memory leaks or runaway queries. We have
shown that SWI-Prolog based servers are capable of running arbitrary
queries within bounded resources concurrently.

The current browser infrastructure has proven to be sufficiently rich,
portable and performant for developing a web IDE for Prolog.
Server-assisted semantic highlighting has proven to be feasible, but the
mechanism is rather fragile because it requires synchronization of two
independent highlighting processes, one at the client and one on the
server. Besides providing shared access, a web frontend allows for
transforming Prolog answers into rich graphical representations such as
tables, charts, graphs or the LPS state transition diagrams.


%================================================================
\subsection{Portability}
\label{sec:portability}

The SWISH client libraries are based on mature JavaScript libraries. The
client runs in all modern major browsers with HTML5, CSS and JavaScript
support. It is frequently tested on FireFox, Chrome, Safari and Internet
Explorer~11.

The server code is basically non-portable. Many of the required
libraries and features are shared with at least one other Prolog
implementation, but none is capable to support the full range. Below we
summarise the main problems.

\begin{itemize}
    \item The scale of the involved Prolog libraries demands for
    a closely compatible Prolog module system.  Probably only
    SICStus and YAP can be used without significant rewrites.

    \item The HTTP server libraries are heavily based on C~code
    that interacts with the SWI-Prolog foreign language interface
    to Prolog streams.  YAP has copied the low-level libraries and is
    capable to run an old version of these libraries.

    \item The Pengines library depends on the HTTP library and
    the multi-thread interface.  The SWI-Prolog thread API is
    also provided by YAP and XSB.

    \item The sandbox library (\secref{sandbox}) assumes that
    whitelisted predicates both have no side effects and are robust
    against stack overflows, handling cylic terms, etc. Few Prolog
    systems can satisfy this requirement. SICStus Prolog would be a
    candidate.

    \item The semantic syntax highlighting depends on detailed
    source layout information provided by read_term/3.  SWI-Prolog's
    support for term layout is an extended version of the Quintus
    Prolog term layout functionality.

    \item Significant parts of the code rely on SWI-Prolog version~7
    extensions, notably the \jargon{dict} and \jargon{string} types
    that facilitate a natural mapping between Prolog and JSON data.
\end{itemize}

From the above list it should be clear that a fully functional port of
SWISH to another Prolog system is not immediately feasible.  There is a
more realistic scenario though. In this setup, SWI-Prolog provides the
web interface and most of the development tools and another language,
not even necessarily Prolog, provides the query solving. The interface
between the two can be based on interprocess communication or, if the
target system is safe and capable of supporting threads, by linking the
target system into the process and using the C~interface.

Interprocess communication is already used in SWISH for embedding
R.\footnote{\url{http://www.swi-prolog.org/pack/list?p=rserve_client}}
This embedding is based on
Rserve\footnote{\url{https://cran.r-project.org/web/packages/Rserve/}}.
Rserve consists of an R instance that is fully initialised and
optionally contains pre-loaded libraries. The R server provides a TCP/IP
or Unix socket and a binary protocol to manage sessions and R commands.
A new connection causes the server to fork a new child that handles the
client. Resource management and isolation are provided by running Rserve
inside a Docker based OS sandbox.\footnote{\url{https://github.com/JanWielemaker/rserve-sandbox}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Discussion}
\label{sec:discussion}

This article presented SWISH, a web service that allows for running
Prolog and domain specific languages (DSLs) defined on top of Prolog
from a browser. SWISH provides an interface that is primarily
targetted at program development and testing as well as a
\jargon{notebook} interface that is targets capturing workflows for data
analysis and tutorials. The SWISH server is a monolitic SWI-Prolog
program were user queries are executed by \jargon{Pengines} which are
built from a Prolog thread and an isolated temporary Prolog module. The
monolitic approach provides easy deployment as well as shared access to,
e.g., large pre-loaded Prolog knowledge bases.

Currently, SWISH is a monolitic server. This simplifies deployment but
harms scalability. Some parts of the interaction with SWISH is by nature
stateful, notably query execution and syntax highlighting which
maintains a clone of the user's editor on the server. These can be
distributed over a pool of servers using a proxy server with support for
\jargon{sticky sessions}, possibly refined to be sticky only for a
particular source document or query. Other parts, such as serving the
main page, icons, CSS, Javascript and manual pages can easily be
offloaded from the Prolog server by using a caching reverse proxy or
serving them from another server. Secondary servers may also be used to
offload the chat and storage services. Extrapolating from resource usage
on the main public server we estimate that SWISH can handle up to about
1,000 concurrent users (dual Intel Xeon E5-2650) for a typical
educational workload.

The current interface provides a better interaction with and more
control for managing queries as well as small Prolog programs than the
traditional Prolog command line and Prolog IDEs. This makes it suitable
for education and data analysis. It is not yet suitable for the
development of large applications. For these scenarios users expect
support for modular program development, a richer editor and a better
debugger.

The current system does not provide much support for animating progress,
such as showing the moves while solving the towers of Hanoi puzzle. One
option used in LPS is to generate the entire animation and then use
Javascript to play the animation in the user's browser. Future versions
may exploit the Pengine \jargon{prompt} mechanism that is also used to
implement read/1 to read from the browser to create interactive
animations. Currently, SWISH rendering plugins are executed in the
context of the HTTP reply mechanism rather than by the Pengine itself.
This implies they are not sandboxed and must be provided by the SWISH
installation and we cannot support user defined rendering plugins.

In data analysis scenarios some queries take long to execute and, if we
provide a result, we would like to be able to reliably reproduce this
result and apply exactly the same version of the analysis program to new
data. For this purpose we are developing a persistent answer cache based
on a hash of the called predicate and its dependencies.


