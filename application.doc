\section{The SWISH application}
\label{sec:application}

Before going into a technical description of the architecture in
\secref{arch} we present the functionality of the key components of
SWISH as it is exposed to the user. SWISH has two `faces'. The first is
an `IDE' face where it shows a program editor, a query editor and query
answers (see \figref{swish}). This is the original interface and it is
the most suitable for program development and testing. Programs created
this way may be saved and reused in other programs or notebooks (see
include/1 in \secref{gitty}). The second `face' is the notebook face
described in \secref{notebook}. The notebook interface is particularly
suitable for educational applications and recording data science
workflows. First we describe the components of the IDE interface. The
notebook interface reuses these components.

\begin{figure}
    \includegraphics[width=\linewidth]{figs/swish-screendump}
    \caption{Screendump of SWISH in `IDE' mode. The left pane shows the
	     source code, while the top-right pane shows a query \jargon{runner}
	     that exploits the current selected answer \jargon{renderer} and
	     buttons on how to continue after the first answer. The bottom-right
	     pane provides the query editor with access to example queries stored
	     in the source, query history, apply solution modifiers, result
	     presentation and a \textsf{Run!} button to start the query.}
    \label{fig:swish}
\end{figure}

\noindent
%================================================================
\subsection{The query editor}
\label{sec:queryeditor}

The \jargon{query editor} is based on the same jQuery plugin that
realises the code editor and thus profits from  syntax highlighting,
template insertion and hovering plugins. In addition, it provides three
popup menus:

\begin{description}
    \item[Examples] This menu is filled from structured comments
in the program.  It provides a menu entry for adding the current
query to the program, either creating an \verb$/** <examples ... */$
comment or extending an existing one.
    \item[History] This menu provides access to previously executed queries.
    \item[Solutions]  This menu embeds an existing query in a meta-call to
alter the result. Currently provided operations are \textit{Aggregate
(count all)}, \textit{Order by}, \textit{Distinct}, \textit{Limit},
\textit{Time} and \textit{Debug (trace)}.  \Figref{aggregate} shows
how the menu is used to count the solutions of a goal.
\end{description}

\begin{figure}
    \includegraphics[width=\linewidth]{figs/aggregate}
    \caption{The \textsf{Solutions} menu can be used to count results,
	     order them, filter duplicates, etc. The upper runner shows
	     answers to the query as a table.}
    \label{fig:aggregate}
\end{figure}

When the user is happy with the query, the \textsf{Run!} button can be
used to execute the query. Pressing \textsf{Run!} collects the current
program and query and creates a \jargon{runner} instance which is
discussed in the next section.


%================================================================
\subsection{Running a query: runners in the answer pane}
\label{sec:answerpane}

The answer pane is a placeholder for \jargon{runners}, where each runner
represents a query. The answer pane provides a menu for operations on
all runners inside it. Provided actions are \textsf{Collapse all},
\textsf{Expand all}, \textsf{Stop all} and \textsf{Clear}. Each runner
in the answer pane represents a query. The query may be completed,
running or waiting for user input. SWISH can manage multiple active
queries at the same time, up to an application defined maximum
(default~3). Once a runner has been created from the program and query
its execution no longer depends on that and the user can thus adjust the
program and/or query and create more runners while the query is
executing.

Each runner provides its own set of commands to control its query.
During execution a runner provides an \textsf{Abort} button. After query
evaluation completes with an answer and more answers may be available
the runner allows for asking the next 1, 10, 100 or 1,000 results or to
\textsf{Stop} the query. In addition, the runner shows a \jargon{text
input} field when the application wants to read input and may show
debugger interaction buttons if the tracer is being used (see
\secref{tracer}).

A runner can render answers in two modes, the classical Prolog mode or
as a table, similar to what many database interfaces provide. The
`table' mode is particularly appealing for querying datasets (see
\figref{aggregate}), while the former is more suitable for rendering
small amounts of complex answers such as the chessboard position in
\figref{swish}. By default, Prolog terms are rendered as structured HTML
objects, where rendered text is the same as Prolog's writeq/1 predicate.

The server can provide \jargon{rendering libraries} that render Prolog
terms using dedicated HTML. In \figref{swish}, the `chess' renderer is
loaded which translates a list of length $N$ holding integers in the
range $1..N$ as a chessboard with queens. The interface allows for
switching the selected rendering as illustrated in \figref{render}.

\begin{figure}
    \includegraphics[width=\linewidth]{figs/render}
    \caption{With the `chess' render library, a list of integers is
	     interpreted as queens on a chessboard.  The user can
	     select rendering as a `Prolog term' to see the actual
	     term.}
    \label{fig:render}
\end{figure}


%================================================================
\subsubsection{Debugging}
\label{sec:tracer}

The SWISH debugger is based on the traditional 4-port debugging model
for Prolog. \Figref{tracer} shows the tracer in action on sublist/2 from
the \textit{Lists} example source. The debugger was triggered by a
break-point on line~10 set by clicking on the line-number in the code
editor. The debugging interaction is deliberately kept simple and
similar to traditional programming environments. A \jargon{retry} button
is added to the commonly seen `step into', `step over' and `step out'
for highlighting the unique feature of Prolog to re-evaluate a goal.

\begin{figure}
    \includegraphics[width=\linewidth]{figs/swish-tracer}
    \caption{Debugging applications in SWISH}
    \label{fig:tracer}
\end{figure}

%================================================================
\subsection{The notebook interface}
\label{sec:notebook}

A notebook is, inspired by IPython notebooks, a series of \jargon{cells}
that is displayed in page order (top-down). The notebook menu allows for
adding a cell, copy/paste a cell, deleting a cell and reordering cells.
SWISH supports four cell types: \jargon{program}, \jargon{query},
\jargon{markdown} and \jargon{HTML}. The program and query cells are
instances of the code editor and query editor. The markdown and HTML
cells have two modes. By default they are displayed in rendered mode.
Double clicking them transforms them into a codemirror editor instance
with syntax highlighting support. Clicking outside the cell re-enables
the rendered mode. Cells have a dynamic height that fits their content.
Program cells have a maximum height and may be collapsed to a single
line.

Notebooks have two types of programs, \jargon{local} and
\jargon{global}. A query that is being executed creates a
\jargon{runner} using the first local program cell above it and all
global program cells. This is commonly used to realise variants of a
query. In this scenario a global program cell is placed (usually) at the
bottom of the notebook that provides the shared code for all queries.
Just above the query cell we place a program cell that parameterizes the
program. For example, suppose we have a database with different timed 
events and we wish to create charts of various of these events. In this
case we write generic code use C3.js or R to vizualize time series in
the global program. Next, we provide clauses to select events as
parameterization to vizualize the events we are interested in as a local
program. A simple generic query completes the picture.

Notebook queries have a settings button that determines whether the
results are shown as a table or a traditional set of bindings, whether
or not the query should be executed when the page is loaded and how
many results to show initially.

\begin{figure}
    \includegraphics[width=\linewidth]{figs/notebook}
    \caption{Screendump of SWISH in `notebook' mode.  The displayed
	     notebook is from the \textsf{Examples} menu, showing
	     statistics from the running SWISH server.  The visible
	     part contains two queries, the bottom one being executed.
	     The result is a chart showing the number of running
	     queries (Pengines), Prolog threads and visitors of the
	     website.  The result is rendered using C3.js.}
    \label{fig:notebook}
\end{figure}


%================================================================
\subsection{Remote access to SWISH}
\label{sec:remote}

SWISH can be integrated in workflows with external tools and data. The
integration options are embedding, downloading query results as CSV,
accessing SWISH as a service and accessing other services from SWISH.

\jargon{Embedding} SWISH in a web page using an \elem{iframe} is
particularly appealing for educational deployment. The SWISH interface
can be preloaded with a \jargon{background program} (an invisible
program that is sent along with each query), a \jargon{program} (that
appears in the code editor), a \jargon{qeury} and \jargon{examples} that
appear in the query editor. It can also be preloaded with a
\jargon{notebook}.

Both a \jargon{runner} and the notebook query editor provide a menu to
download the query answers as CSV. The subsequent dialogue allows for
setting a limit on the number of results and defining the
\jargon{projection}; the variables included in the CSV and the order of
these variables.

The Pengine API has clients for Prolog, JavaScript, Java, Ruby and
Erlang. This API can be used to execute queries against programs that
are provided by the client or available as saved documents on the SWISH
server. 

The client for Prolog even offers a predicate for making non-deterministic RPC calls, like so:

\begin{code}
?- use_module(library(pengines)).
true.
?- pengine_rpc('https://swish.swi-prolog.org', member(X,[a,b,c])).
X = a ;
X = b ;
X = c.
?-
\end{code}

SWISH instances can be configured to make SWI-Prolog's
primitives to access data available to users.