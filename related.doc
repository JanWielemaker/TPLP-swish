\section{Related work}
\label{sec:related}

We are not aware of other initiatives that aim at developing a rich
web-based development environment for Prolog. There are web sites that
allow for running Prolog online such as Tutorial
Points\footnote{\url{https://www.tutorialspoint.com/execute_prolog_online.php}}.
These sites either run your Prolog program as a batch job or provide a
classical terminal to access Prolog. None of the environments we visited
provide features SWISH provides such as a notebook interface or
rendering Prolog answers using web technology such as charts.

We do not compare SWISH with traditional editor or GUI based development
environments for Prolog such as GNU-Emacs or
ProDT\footnote{\url{http://prodevtools.sourceforge.net/}}, because
web-based environments provide both new opportunities such as shared
access and pose new challenges such as a more limited interface, limited
bandwidth and high latencies. Instead, we discuss three applications
that have served as inspiration for SWISH:
JSFiddle,\footnote{\url{https://jsfiddle.net/}}
R-Studio\footnote{\url{http://www.rstudio.com/}} and Jupyter
Notebooks.\footnote{\url{http://jupyter.org}}

\begin{itemize}
\item
As stated, the initial inspiration for SWISH was JSFiddle. Unlike
JSFiddle though, Prolog is executed on the server rather than in the
browser.

\item
R-Studio \cite{gandrud2013reproducible} is an interface to the R
statistical package. Although not a web application, it is based on the
Qt webkit framework and uses web based technology in the background. The
R-studio interface has a similar layout as SWISH, providing a source
window, a console and an output window that typically shows results as
tables or charts.

\item
Jupyter notebooks (formerly IPython notebooks)
\cite{rossant2013learning} allows mixing markdown or HTML text with
Python sources. The rendered Notebook shows the text, sources and
possible results as numbers, tables or charts.
\end{itemize}

SWISH embodies many of the ideas behind JSFiddle, R-Studio and Jupyter.
SWISH provides shared anynymous access like JSFiddle. Both the R-Studio
`program and output window' and Jupyter notebook interfaces are
available as they serve different user communities in our experience.

Both R-Studio and Jupyter notebooks work on the basis of
\jargon{authenticated access}. Once access is obtained, any command may
be executed. SWISH can operate both as a public service granting access
to non-intrusive queries that may be executed concurrently on shared
(typically read-only) data and as an authenticated service to run
arbitrary queries. The authenticated mode is often used for maintenance
purposes such as updating the server software or loading data for shared
analysis.

Where Jupyter supports other languages using the notion of a Jupyter
\jargon{kernel}, such support is not provided by SWISH. Where Prolog is
sufficiently different from the languages targetted by Jupyter to
justify dedicated support, SWISH has little to offer to compete with
Jupyter on the languages it supports properly.

Unlike the above, SWISH can easily be embedded into web pages using an
\elem{iframe} element were the program, examples and queries can be
provided in the URL that loads SWISH. This feature can be used to
transform source code in a static HTML page into a SWISH instance using
a simple JavaScript call. This is demonstrated in \secref{lpn}.

